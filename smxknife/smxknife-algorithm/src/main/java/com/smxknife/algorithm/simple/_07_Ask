
* 1. 已知函数f()，可以等概率的获取1，2，3，4，5这五个数中的一个，如果等概率获得1～7

```
a. 之前自己想了一个思路，但是全错了

b. 左程云的思路：
    将f()改成0到1的等概率函数f1
        f1 =
            if [f()==1 || f()==2] return 0
            else if [f()==3] continue
            else [f()==4 || f()==5] return 1

        f2 =
            (f1() << 2) | (f1() << 1) | f1()
            这样f2就是表示0到7的等概率函数
            f1() << 2  要么是100，要么是000，所以最高位等概率
            f1() << 1  要么是010，要么是000，所以中间位等概率
            f1() << 0  其实就是f1(), 决定最低位
            所以f2等概率返回0～7

        f3 = 循环调用f2，只要遇到f2=7就继续循环，不等于7返回
            得到0到6等概率

        f4 = f3 + 1 得到1到7

        =================================================

        对上面的问题进行通用抽象：

        如[10, 20]的等概率函数
            思路可以是先生成[0, 10]，然后加加上10就可以得到[10, 20]

        1. 将f修改为0，1发生器
            如果是偶数n个，小于n/2返回0，大于n/2返回1
            如果是奇数个，如果是n/2+1，进行循环不返回，否则跟偶数处理一样
        2. 根据0，1发生器，构建一个位函数
            像上面的f2，要表示7需要3个二进制位，要表示10，需要4个二进制位
            这样会构建一个0到15的等概率函数，会超出要表示的范围
        3. 采用循环的方式，只要第二步生成数不在[0,10]范围内就进行循环，直到范围内返回
        4. 步骤3的函数加上10，这样通用的步骤就可以了


```

* 2. 已知函数f(), 获得0的概率是p，获得1的概率是1-p，如何等概率获得0和1？

```
    1. 通用按照位来看，f() << 1 | f()
        结果是：
            00：不要了，继续循环
            11：不要了，继续循环
            01：返回0
            10：返回1

    2. 代码实现：

        public int f() {
            return Math.random() < 0.84 ? 0 : 1;
        }

        public int g() {
            int ans = 0;
            do {
                ans = f();
            } while(ans = f());
            // 这个设计太鸡贼了，如果调用两次f()返回的结果一样，那么继续循环下去，
            // 其实，就相当于00和11的情况，如果不一样，那么就返回
            return ans;
        }
```
