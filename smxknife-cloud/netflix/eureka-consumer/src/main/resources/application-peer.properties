server.port=8001

spring.application.name=eureka-consumer

############ actuator配置 #################

# 启动所有端点，springboot2.x默认只开启了health和info两个端点
management.endpoints.web.exposure.include=*
# 启动shutdown端点（仅支持post）
management.endpoint.shutdown.enabled=true
# 默认情况下，是never，只会显示status，如果改为always，那么会显示详细信息
management.endpoint.health.show-details=always


############ eureka配置 #################

# 是否从eureka server获取注册信息
eureka.client.fetch-registry=true
# 是否将自己注册到Eureka Server
eureka.client.register-with-eureka=true
# 注册地址
eureka.client.service-url.defaultZone=http://admin:pass@peer1:7900/eureka

# 默认情况下，eureka server是通过心跳包来确定注册到server的服务是up还是down
# 但是这会存在弊端，有一种情况是，服务虽然在，但是已经无法继续提供服务了，这种情况下心疼包还是正常的，对server来说该服务还是正常的
# 所以，这种情况下是有问题的
# 开启该配置后，会改变eureka server对服务健康检查的方式，可以采用actuator的health端点进行检测
eureka.client.healthcheck.enabled=true

eureka.instance.metadata-map.role=consumer


############ ribbon配置 #################

# 服务名为eureka-provider的ribbon调用采用的负载均衡策略是RandomRule
# eureka-provider.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
# 上面注释掉是因为要测试server间的灰度发布，自定义了一个LoadbalancerRule


